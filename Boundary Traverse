//................................Boundary Traverse........................................// (GFG question)

class Solution {
  public:
  
  //fuction to traverse left part of the tree
    void traverseLeft(Node * root , vector<int>& ans){
        if( (root == NULL) || (root->left == NULL && root->right == NULL) ){
            return ;
        }
        ans.push_back(root->data);
        
        if(root->left){
            traverseLeft(root->left , ans);
        }
        else{
            traverseLeft(root->right , ans);
        }
    }
    
    void traverseLeaf(Node * root , vector<int>&ans){
        if(root == NULL) return ;
        if(root->left == NULL && root->right == NULL){
            ans.push_back(root->data);
            return;
        }
        traverseLeaf(root->left , ans);
        traverseLeaf(root->right , ans);
    }
    
    void traverseRight(Node * root , vector<int>&ans){
        if( (root == NULL) || (root->left == NULL && root->right == NULL) ){
            return ;
        }
        if(root->right) traverseRight(root->right , ans);
        else traverseRight(root->left , ans);
        
        // wapas aaega 
        ans.push_back(root->data);
    }
    vector<int> boundaryTraversal(Node *root) {
        vector<int> ans;
        if(root == NULL){
            return ans;
        }
        ans.push_back(root->data);
        
        // 1.  traverse left part 
        traverseLeft(root->left , ans);
        
        // 2. traverse leaf part 
        // for left leaf 
        traverseLeaf(root->left , ans);
        // for right leaf
        traverseLeaf(root->right ,ans);
        
        // 3. traverse right part - in a reverse order.
         //traverse left part 
        traverseRight(root->right , ans);
        
        return ans;
    }
};
